import { DevActions, ObjectView } from 'sys.ui.dev';
import { Font } from '..';
import { Doc } from '../../Doc';
import { FontCardProps, FontCardFontProp } from '../ui/FontCard';

type Ctx = {
  props: FontCardProps;
};

const Util = {
  fontProp(ctx: Ctx) {
    return ctx.props.font || ((ctx.props.font = {}) as FontCardFontProp);
  },
};

/**
 * Actions
 */
export const actions = DevActions<Ctx>()
  .namespace('sys.Font')
  .context((e) => {
    if (e.prev) return e.prev;
    const ctx: Ctx = {
      props: {
        size: 220,
        font: { family: 'Merriweather' },
        char: Font.UI.FontCard.DEFAULT.char,
      },
    };
    return ctx;
  })

  .init(async (e) => {
    const { ctx, bus } = e;
  })

  .items((e) => {
    e.title('Props');

    e.select((config) => {
      config
        .title('font.family')
        .items([
          { label: 'custom: "Merriweather"', value: 'Merriweather' },
          { label: 'system: sans-serif', value: 'sans-serif' },
          { label: 'system: sans', value: 'sans' },
          { label: 'system: monospace', value: 'monospace' },
        ])
        .initial(Util.fontProp(config.ctx).family)
        .view('buttons')
        .pipe((e) => {
          if (e.changing) Util.fontProp(e.ctx).family = e.changing?.next[0].value;
        });
    });

    e.select((config) => {
      const items = ['à', 'p', 'ß', '🐷'];
      config
        .title('char')
        .items(items)
        .initial(config.ctx.props.char)
        .view('buttons')
        .pipe((e) => {
          if (e.changing) e.ctx.props.char = e.changing?.next[0].value;
        });
    });

    e.hr();
  })

  .items((e) => {
    e.title('Dev');

    e.hr();

    e.component((e) => {
      return (
        <ObjectView
          name={'ctx'}
          data={e.ctx}
          style={{ MarginX: 15 }}
          fontSize={10}
          expandPaths={['$']}
        />
      );
    });
  })

  .subject((e) => {
    e.settings({
      actions: { width: 300 },
      host: { background: -0.04 },
      layout: {
        label: {
          topLeft: '<Font>',
          bottomRight: `family:"${Util.fontProp(e.ctx).family}"`,
        },
        cropmarks: -0.2,
      },
    });

    e.render(
      <Doc.Fonts style={{ flex: 1 }}>
        <Font.UI.FontCard {...e.ctx.props} style={{ flex: 1 }} />
      </Doc.Fonts>,
    );
  });

export default actions;
