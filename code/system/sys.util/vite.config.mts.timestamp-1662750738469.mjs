// ../../compiler/builder.node/Config.Vite.mts
import { defineConfig } from "vite";

// ../../compiler/builder.node/common/fs.mts
import fsextra from "fs-extra";
import glob from "glob";
import path from "path";
var fs = {
  ...fsextra,
  ...path,
  glob: {
    find(pattern) {
      return new Promise((resolve, reject) => {
        glob(pattern, (err, matches) => err ? reject(err) : resolve(matches));
      });
    }
  }
};

// ../../compiler/builder.node/common/libs.mts
import { execa } from "execa";
import pc from "picocolors";
import rimraf from "rimraf";

// ../../compiler/builder.node/Config.Vite.mts
var ViteConfig = {
  defaults: {
    test() {
      return {
        globals: false,
        include: ["**/*.{TEST,SPEC}.{ts,tsx,mts,mtsx}"]
      };
    },
    lib(dir, name) {
      return {
        name,
        entry: `${dir}/src/index.mts`,
        fileName: "index",
        formats: ["es"]
      };
    }
  },
  default(dir, modify) {
    return defineConfig(async ({ command, mode }) => {
      const pkg = await fs.readJson(fs.join(dir, "package.json"));
      const deps = { ...pkg.dependencies, ...pkg.devDependencies };
      const name = pkg.name;
      const lib = ViteConfig.defaults.lib(dir, name);
      const external = [];
      const rollupOptions = {
        external,
        output: { globals: {} }
      };
      const config = {
        plugins: [],
        test: ViteConfig.defaults.test(),
        build: { lib, rollupOptions }
      };
      const args = {
        ctx: { name, command, mode, config, pkg, deps },
        addExternalDependency(moduleName) {
          asArray(moduleName).filter((name2) => !external.includes(name2)).forEach((name2) => external.push(name2));
        }
      };
      Object.keys(deps).forEach((moduleName) => args.addExternalDependency(moduleName));
      await (modify == null ? void 0 : modify(args));
      return config;
    });
  }
};
function asArray(input) {
  return (Array.isArray(input) ? input : [input]).filter(Boolean);
}

// vite.config.mts
var __vite_injected_original_dirname = "/Users/phil/code/CellPlatform/platform-0.2.0/code/system/sys.util";
var vite_config_default = ViteConfig.default(__vite_injected_original_dirname);
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
